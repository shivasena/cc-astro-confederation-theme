---
description: 
globs: 
alwaysApply: true
---
You are an expert in JavaScript, TypeScript, and Astro framework for scalable web development.

**Key Principles**

- Write technical, concise answers with clear Astro examples.
- Favor static generation and minimal JavaScript for top performance.
- Leverage Astro’s multi-framework support and partial hydration for React when needed. AlpineJS if the first choice if we need to use simple client side scripts with official AstroJS + AlpineJS integration.
- Use descriptive names and follow Astro’s naming conventions.
- Organize files using Astro’s file-based routing.

---

## Astro Project Structure

- Adopt this layout:
  - `src/`
    - `components/`
    - `components/svg/` <!-- Transformed SVGs as Astro components -->
    - `layouts/`
    - `pages/`
    - `styles/` <!-- global.css and other styles -->
    - `assets/` <!-- Local images and files -->
    - `data/` <!-- Local JSON or other data files -->
    - `lib/` <!-- Utility functions -->
    - `types/` <!-- TypeScript definitions -->
  - `public/` <!-- Static assets -->
  - `astro.config.mjs` <!-- Configuration -->

---

## Icons

- Pick an icon set that matches your design style.
- Convert SVG files into Astro components under `src/components/svg/` so you can style them consistently.
- Use astro-icon library for icons and most icons needs to be used from one collection when possible, prioritize collections that already preinstalled from @iconify-json/\* packages

---

## Component Development

- Build components as `.astro` files.
- Import React components only if a feature demands client-side interactivity.
- Pass data via props and compose small, reusable pieces.
- Use `<Fragment>` when you need to return multiple elements without a wrapper.
- Write ES module imports; avoid CommonJS.

---

## Routing and Pages

- Place pages under `src/pages/` for file-based routing.
- Create dynamic routes with `[...slug].astro`.
- Use `getStaticPaths()` to generate static pages for dynamic routes.
- Add a `404.astro` page for missing routes.
- For collections (blog, docs), let `/blog/` be the main listing; page two is `/blog/1/`, then `/blog/2/`, etc., keeping the first page clean.

---

## Content Management

- Integrate a headless CMS (Sanity or similar) via Astro Content Layer if needed.
- Store structured content in collections instead of hardcoding Markdown for dynamic sections.
- If you must use Markdown, place `.md`/`.mdx` files in a `content/` folder and read them via Astro’s built-in support.

---

## Data Management

- Use SQLite with Turso for any build-time data needs.
- Query the database in `getStaticPaths()` or on the server side at build time.
- Keep sensitive keys in environment variables.

---

## Styling

- All Tailwind theme and utilities go into `src/styles/global.css` instead of `tailwind.config.cjs`.
- Use colors and typography from predefined utilities in global.css first, and to achieve shades you might use transparancy utility, like text-dark/XX from tailwind.
- At the top of `global.css`, import Tailwind and any plugins:
  ```css
  @import "tailwindcss";
  @plugin "@tailwindcss/typography";
  ```
- Define custom properties and fluid type scales via `@theme` in `global.css`:

  ```css
  @theme {
    /* Fonts */
    --font-outfit: "Outfit Variable", sans-serif;

    /* Colors */
    --color-accent: oklch(40.16% 0.087584 236.9217); /* Navy Blue */
    --color-dark: oklch(23.29% 0.0395 238.46);
    --color-light: oklch(98.6% 0.0114 84.58); /* Based on Yellow */
    --color-accent-yellow: oklch(78.46% 0.165273 75.3442);
    --color-accent-red: oklch(60.95% 0.2056 29.03);
    --color-accent-brown: oklch(38.06% 0.0819 55.12);
    --color-secondary-1: oklch(40.81% 0.0852 154.17);
    --color-secondary-2: oklch(37.82% 0.1445 30.8);

    /* Fluid type scale */
    --fs-h1: clamp(2rem, 5vw, 3.052rem);
    --fs-h2: clamp(1.75rem, 4.5vw, 2.441rem);
    --fs-h3: clamp(1.5rem, 4vw, 1.953rem);
    --fs-h4: clamp(1.25rem, 3.5vw, 1.563rem);
    --fs-h5: clamp(1rem, 3vw, 1.25rem);
    --fs-h6: clamp(0.875rem, 2.5vw, 1rem);
    --fs-p: clamp(0.875rem, 2vw, 1rem);
    --fs-small: clamp(0.75rem, 1.5vw, 0.875rem);
    --fs-quote: clamp(1rem, 2.5vw, 1.25rem);
    --fs-lead: clamp(1.125rem, 2.5vw, 1.325rem);
    --fs-note: clamp(0.875rem, 2vw, 1rem);
    --fs-eyebrow: clamp(0.75rem, 1.75vw, 0.9rem);
  }
  ```

- Add custom utilities via `@layer utilities` in `global.css`:

  ```css
  @layer utilities {
    /* Headings – tighter line-heights, strong weight */
    .text-h1 {
      font-size: var(--fs-h1);
      line-height: 1.2;
      font-weight: 700;
    }
    .text-h2 {
      font-size: var(--fs-h2);
      line-height: 1.25;
      font-weight: 600;
    }
    .text-h3 {
      font-size: var(--fs-h3);
      line-height: 1.3;
      font-weight: 600;
    }
    .text-h4 {
      font-size: var(--fs-h4);
      line-height: 1.35;
      font-weight: 600;
    }
    .text-h5 {
      font-size: var(--fs-h5);
      line-height: 1.4;
      font-weight: 600;
    }
    .text-h6 {
      font-size: var(--fs-h6);
      line-height: 1.4;
      font-weight: 600;
    }

    /* Body text – comfortable line-height, normal weight */
    .text-p {
      font-size: var(--fs-p);
      line-height: 1.75;
      font-weight: 400;
    }
    .text-small {
      font-size: var(--fs-small);
      line-height: 1.75;
      font-weight: 400;
    }
    .text-quote {
      font-size: var(--fs-quote);
      line-height: 1.75;
      font-weight: 400;
    }
    .text-lead {
      font-size: var(--fs-lead);
      line-height: 1.6;
      font-weight: 400;
    }
    .text-note {
      font-size: var(--fs-note);
      line-height: 1.6;
      font-weight: 600;
    }

    /* Eyebrow text – above headlines, all caps, accent color */
    .text-eyebrow {
      font-size: var(--fs-eyebrow);
      line-height: 1.4;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      margin-bottom: 0.5rem;
    }
  }
  ```

- Attach base utilities at `:root` level via Tailwind’s `@apply`:
  ```css
  :root {
    @apply font-sans text-dark bg-light antialiased;
    font-family: var(--font-outfit);
  }
  ```
- For any additional global rules (e.g., root font-size override), put them in `global.css` above or below the Tailwind imports.

---

## Forms Handling

- Use Netlify Forms for submissions:
  ```html
  <form name="contact" method="POST" netlify action="/thank-you/">
    <input type="hidden" name="form-name" value="contact" />
    <label>
      Name:
      <input type="text" name="name" required />
    </label>
    <label>
      Email:
      <input type="email" name="email" required />
    </label>
    <label>
      Message:
      <textarea name="message" required></textarea>
    </label>
    <button type="submit">Send</button>
  </form>
  ```
- Redirect to a /thankyou page after submission.
- Add basic spam protection (honeypot fields or reCAPTCHA) and validation.
- Make forms accessible

---

## Performance Optimization

- Keep client-side JavaScript minimal.
- Use `client:*` directives for partial hydration:
  - `client:load` for components that must hydrate immediately.
  - `client:idle` for noncritical interactive parts.
  - `client:visible` for components that hydrate when scrolled into view.
- Optimize images with Astro’s image integration; lazy-load large assets.

---

## Data Fetching

- Use `Astro.props` to pass data into components.
- For dynamic routes, implement `getStaticPaths()` to fetch build-time data.
- Use `Astro.glob()` to pull in local files (images, JSON, Markdown).
- Wrap fetch calls in try/catch to catch errors during build.

---

## SEO and Meta Tags

- Insert meta tags inside `<head>` on each page.
- Add a canonical `<link>` tag pointing to the source URL.
- Create a reusable `<SEO>` component that accepts title, description, og:image, etc.

---

## Integrations and Plugins

- Configure official Astro integrations in `astro.config.mjs`, for example:

  ```js
  // @ts-check
  import { defineConfig } from "astro/config";
  import alpinejs from "@astrojs/alpinejs";
  import icon from "astro-icon";
  import tailwindcss from "@tailwindcss/vite";

  // https://astro.build/config
  export default defineConfig({
    integrations: [alpinejs(), icon()],
    vite: {
      plugins: [tailwindcss()],
    },
  });
  ```

- Use Astro’s Content Layer to manage Markdown or MDX files if needed.

---

## Build and Deployment

- Run `astro build` before deploying.
- Deploy to Netlify with GitHub integration; use Netlify Build Hooks for auto-deploy.
- Store environment variables in Netlify Dashboard under Settings > Build & deploy > Environment.
- If you need advanced CI, add a GitHub Actions workflow that runs `astro build` on push.

---

## Testing

- Write unit tests for utility functions using Vitest.
- Use Cypress for end-to-end testing of core flows.
- If your design changes often, set up a visual regression tool like Chromatic or Percy.

---

## Accessibility

- Use semantic HTML in components (headings, lists, landmarks, nav, aside, figure, etc...).
- Add ARIA attributes for interactive elements (role, aria-label).
- Confirm keyboard navigation works for any custom elements.
- Avoid inline styles that might override focus outlines.

---

## Performance Metrics

- Track LCP, FID, CLS with Lighthouse or WebPageTest.
- Define performance budgets (e.g., max page weight, number of JS bundles).
- Monitor metrics in production via real user monitoring or synthetic tests.

---

## Key Conventions

- Use modern JavaScript features; prefer import statements.
- Use native `node:fetch`; bring in libraries only if necessary.
- Follow Astro’s official style guide (indentation, file naming).
- Use TypeScript for type safety; add types in `src/types/`.
- Add trailing slashes to links and follow pagination conventions.
- Use Astro’s `<Image>` component for responsive images.

---

## References

- Astro v5 documentation: https://docs.astro.build
- Astro Content Collections: https://docs.astro.build/en/guides/content-collections/
- Astro Integrations: https://docs.astro.build/en/guides/integrations/
- Turso for SQLite: https://turso.tech/
- Netlify documentation: https://docs.netlify.com
- Fontsource: https://fontsource.org/
- Astro Icon docs: https://www.astroicon.dev/getting-started/
- AlpineJS documentation: https://alpinejs.dev/